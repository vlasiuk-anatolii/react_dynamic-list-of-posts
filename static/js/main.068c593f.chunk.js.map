{"version":3,"sources":["api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","components/Loader/Loader.tsx","api/api.ts","App.tsx","index.tsx"],"names":["BASE_URL","getPosts","userId","a","fetch","response","ok","Error","status","statusText","json","getPostbyId","postId","getAllPosts","PostsList","userSelectedId","selectPostId","setIsLoading","useState","currentPostList","setPostList","allPosts","result","findposts","useEffect","className","map","post","body","type","onClick","id","getComments","delComment","method","postComment","name","email","headers","JSON","stringify","NewCommentForm","commentsList","setCommentsList","setName","setEmail","comment","setComment","error","setError","addComment","newComment","afterAdded","onSubmit","event","preventDefault","length","required","placeholder","value","onChange","target","style","color","PostDetails","visiblecomments","setVisiblecomments","postDetails","setPostDetails","findPost","findcomments","deletecomment","title","comm","Loader","App","allUsers","setAllUsers","currentUser","setCurrentUser","selectedPostId","setSelectedPostId","isLoading","getAllUsers","then","disabled","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.068c593f.chunk.js","sourcesContent":["import { Post } from '../react-app-env';\n\nexport const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getPosts(userId: string): Promise<Post[]> {\n  const response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function getPostbyId(postId:number) {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n\nexport async function getAllPosts() {\n  const response = await fetch(`${BASE_URL}/posts`);\n\n  return response.json();\n}\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\nimport { getAllPosts, getPosts } from '../../api/posts';\nimport { Post } from '../../react-app-env';\n\ntype Props = {\n  userSelectedId: string;\n  selectPostId: (arg: number) => void;\n  postId: number | null;\n  setIsLoading: (arg: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userSelectedId,\n  selectPostId,\n  postId,\n  setIsLoading,\n}) => {\n  const [currentPostList, setPostList] = useState<Post[]>([]);\n\n  const allPosts = async () => {\n    const result = await getAllPosts();\n\n    setPostList(result);\n    setIsLoading(false);\n  };\n\n  const findposts = async () => {\n    const result = await getPosts(userSelectedId);\n\n    setPostList(result);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    findposts();\n  }, [userSelectedId]);\n\n  useEffect(() => {\n    allPosts();\n  }, []);\n\n  return (\n    <div className=\"PostsList\">\n      <>\n        <h2>Posts:</h2>\n        <ul\n          className=\"PostsList__list\"\n          data-cy=\"postDetails\"\n        >\n          {currentPostList.map(post => (\n            <li\n              className=\"PostsList__item\"\n              key={post.id}\n            >\n              <div>\n                <b>\n                  {`[User ${post.userId}]: `}\n                </b>\n                {post.body}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  if ((post) && (postId === post.id)) {\n                    selectPostId(0);\n                  } else {\n                    selectPostId(post.id);\n                  }\n\n                  setIsLoading(true);\n                }}\n              >\n                {post && (postId === post.id)\n                  ? 'Close'\n                  : 'Open'}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getComments(postId: number) {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport async function delComment(id : number) {\n  const result = await fetch(`${BASE_URL}/comments/${id}`, { method: 'DELETE' });\n\n  return result;\n}\n\nexport async function postComment(\n  name : string,\n  email : string,\n  body : string,\n  postId: number,\n) {\n  await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n}\n","import './NewCommentForm.scss';\nimport React, { FormEvent, useState } from 'react';\nimport { Comment, NewComment } from '../../react-app-env';\nimport { postComment, getComments } from '../../api/comments';\n\ntype Props = {\n  commentsList: Comment[] | undefined;\n  setCommentsList: (arg:Comment[]) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  commentsList, setCommentsList,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState(false);\n\n  const addComment = async (newComment: NewComment) => {\n    if (commentsList) {\n      postComment(\n        newComment.name,\n        newComment.email,\n        newComment.body,\n        newComment.postId,\n      );\n\n      const afterAdded = await getComments(newComment.postId);\n\n      setCommentsList(afterAdded);\n    }\n  };\n\n  const submitHandler = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (name && email && comment && commentsList) {\n      const newComment = {\n        id: commentsList.length + 1,\n        postId: commentsList[0].postId,\n        name,\n        email,\n        body: comment,\n      };\n\n      addComment(newComment);\n      setError(false);\n      setName('');\n      setEmail('');\n      setComment('');\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitHandler}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          required\n          placeholder=\"Your name\"\n          value={name}\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          required\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          required\n          value={comment}\n          onChange={(event) => {\n            setComment(event.target.value);\n          }}\n        />\n      </div>\n      {error && (\n        <div style={{ color: 'red' }}>\n          Add correct data\n        </div>\n      )}\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Comment, Post } from '../../react-app-env';\nimport { getComments, delComment } from '../../api/comments';\nimport { getPostbyId } from '../../api/posts';\n\ntype Props = {\n  postId: number;\n  setIsLoading: (arg: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  postId,\n  setIsLoading,\n}) => {\n  const [commentsList, setCommentsList] = useState<Comment[]>([]);\n  const [visiblecomments, setVisiblecomments] = useState(false);\n  const [postDetails, setPostDetails] = useState<Post>();\n\n  const findPost = async () => {\n    if (postId) {\n      const result = await getPostbyId(postId);\n\n      setPostDetails(result);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    findPost();\n  }, []);\n\n  const findcomments = async () => {\n    if (postId) {\n      const result = await getComments(postId);\n\n      setCommentsList(result);\n      setIsLoading(false);\n    }\n  };\n\n  const deletecomment = async (id: number) => {\n    if (commentsList) {\n      await delComment(id);\n      findcomments();\n    }\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    findcomments();\n  }, [postId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      {postId !== 0 && (\n        <>\n          <section className=\"PostDetails__post\">\n            <p>\n              {postDetails?.title}\n            </p>\n          </section>\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setVisiblecomments(!visiblecomments);\n              }}\n            >\n              {commentsList && ((visiblecomments)\n                ? `Show ${commentsList.length} comments`\n                : `Hide ${commentsList.length} comments`)}\n            </button>\n            <ul\n              className={visiblecomments\n                ? 'PostDetails__visiblelist'\n                : 'PostDetails__list'}\n            >\n              {commentsList && commentsList.map(comm => (\n                <li\n                  className=\"PostDetails__list-item\"\n                  key={comm.id}\n                >\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deletecomment(comm.id);\n                    }}\n                  >\n                    X\n                  </button>\n                  <p>{comm.body}</p>\n                </li>\n              ))}\n              {setIsLoading(false)}\n            </ul>\n          </section>\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                commentsList={commentsList}\n                setCommentsList={setCommentsList}\n              />\n            </div>\n          </section>\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","export const BASE_URL = 'https://mate.academy/students-api/';\n\nexport async function getAllUsers() {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { User } from './react-app-env';\nimport { Loader } from './components/Loader';\nimport { getAllUsers } from './api/api';\n\nconst App: React.FC = () => {\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const [currentUser, setCurrentUser] = useState('0');\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    getAllUsers()\n      .then(response => setAllUsers(response));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={currentUser}\n            onChange={(event) => {\n              setCurrentUser(event.target.value);\n              setIsLoading(true);\n            }}\n          >\n            <option value=\"0\" disabled>All users</option>\n            {allUsers.map(user => (\n              <option\n                key={user.id}\n                value={`${user.id}`}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {isLoading && <Loader />}\n          <PostsList\n            userSelectedId={currentUser}\n            selectPostId={setSelectedPostId}\n            postId={selectedPostId}\n            setIsLoading={setIsLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {currentUser !== '0' ? (\n            <PostDetails\n              postId={selectedPostId}\n              setIsLoading={setIsLoading}\n            />\n          ) : (<p>Choose user!</p>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}